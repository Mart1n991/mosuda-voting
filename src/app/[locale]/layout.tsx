import { Metadata } from "next";

import { routing } from "@/i18n/routing";
import { notFound } from "next/navigation";
import { getMessages } from "next-intl/server";
import { NextIntlClientProvider } from "next-intl";

import "../globals.css";
import { lexend } from "../fonts";
import { RecaptchaProvider } from "./RecaptchaProvider";

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function LocaleLayout({
  children,
  params,
}: {
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
}) {
  const resolvedParams = await params;
  const locale = resolvedParams.locale;

  // Ensure that the incoming `locale` is valid
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  if (!routing.locales.includes(locale as any)) {
    notFound();
  }

  // Providing all messages to the client
  // side is the easiest way to get started
  const messages = await getMessages();

  return (
    <html lang={locale}>
      <body className={`${lexend.variable} antialiased`}>
        <NextIntlClientProvider messages={messages}>
          <RecaptchaProvider>{children}</RecaptchaProvider>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}

// Define valid locales statically
export function generateStaticParams() {
  return routing.locales.map((locale) => ({ locale }));
}
